{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Source","title":"Home"},{"location":"analysis/","text":"Introduction This task is split into three seperate \"functions\". Menu A simple command-line way of interacting with the program, until the user no longer wants to. Password Checker A password checker, based upon a score system. Password Generator A password generator that uses the Password Checker to verify the strength of the password, in order to make a strong, and random password for the user.","title":"Introduction"},{"location":"analysis/#introduction","text":"This task is split into three seperate \"functions\".","title":"Introduction"},{"location":"analysis/#menu","text":"A simple command-line way of interacting with the program, until the user no longer wants to.","title":"Menu"},{"location":"analysis/#password-checker","text":"A password checker, based upon a score system.","title":"Password Checker"},{"location":"analysis/#password-generator","text":"A password generator that uses the Password Checker to verify the strength of the password, in order to make a strong, and random password for the user.","title":"Password Generator"},{"location":"analysis/proposedsolution/","text":"The Programing Language I will be using TypeScript. Why TypeScript? TypeScript is a superset of JavaScript, so in the end it is JavaScript - with types, and other features. This means not only is it cross-platform, but also performant, and can be made into a web application easily through the use of React. While I could use Python, I decided not to due to the reasons stated above, and I am not as experienced with it. In addition, Python's syntax and underlying architecture is not the best. Some may argue I could use the C family, and while I could, it may be too sophisticated for such a simple task.","title":"Proposed Solution"},{"location":"analysis/proposedsolution/#the-programing-language","text":"I will be using TypeScript.","title":"The Programing Language"},{"location":"analysis/proposedsolution/#why-typescript","text":"TypeScript is a superset of JavaScript, so in the end it is JavaScript - with types, and other features. This means not only is it cross-platform, but also performant, and can be made into a web application easily through the use of React. While I could use Python, I decided not to due to the reasons stated above, and I am not as experienced with it. In addition, Python's syntax and underlying architecture is not the best. Some may argue I could use the C family, and while I could, it may be too sophisticated for such a simple task.","title":"Why TypeScript?"},{"location":"analysis/successcriteria/menu/","text":"The menu should have the following options for the user to select from: Check Password Generate Password Quit.","title":"Menu"},{"location":"analysis/successcriteria/passwordchecker/","text":"Checks If the user fails the following checks, then an error message would be displayed. Password Length The length must be between 8-24 characters . Allowed characters The program must check whether the characters within the password are allowed. The following characters are allowed: Alphanumeric Characters Allowed Symbols (see below) Allowed Symbols If the user inputs any symbols, these are the allowed ones. ! $ % ^ & * ( ) - _ = + Warning The space character is not allowed Score Calculation The following will explain how the program should calculate a password's total score. Additions If the password contains any of the following, it will recieve the configurated amount of points. By default it is 5 points. A Uppercase Character A Lowercase Character A Digit An Allowed Symbol Success If it includes all of the above, it will recieved the configured amount of points. By default it is 10 points. Subtractions However, if it contains only the following, it will recieve the configured amount of points. By default it is -5 points. Upper/Lowercase Characters Digits Allowed Symbols Consecutive (three) characters on the UK QWERTY keyboard, within the same row Strength Determination To determine the strength, you must calculate the score first then you can input it within this table. Score Strength =< 0 Weak 1-20 Medium 21+ Strong","title":"Password Checker"},{"location":"analysis/successcriteria/passwordchecker/#checks","text":"If the user fails the following checks, then an error message would be displayed.","title":"Checks"},{"location":"analysis/successcriteria/passwordchecker/#password-length","text":"The length must be between 8-24 characters .","title":"Password Length"},{"location":"analysis/successcriteria/passwordchecker/#allowed-characters","text":"The program must check whether the characters within the password are allowed. The following characters are allowed: Alphanumeric Characters Allowed Symbols (see below)","title":"Allowed characters"},{"location":"analysis/successcriteria/passwordchecker/#allowed-symbols","text":"If the user inputs any symbols, these are the allowed ones. ! $ % ^ & * ( ) - _ = + Warning The space character is not allowed","title":"Allowed Symbols"},{"location":"analysis/successcriteria/passwordchecker/#score-calculation","text":"The following will explain how the program should calculate a password's total score.","title":"Score Calculation"},{"location":"analysis/successcriteria/passwordchecker/#additions","text":"If the password contains any of the following, it will recieve the configurated amount of points. By default it is 5 points. A Uppercase Character A Lowercase Character A Digit An Allowed Symbol Success If it includes all of the above, it will recieved the configured amount of points. By default it is 10 points.","title":"Additions"},{"location":"analysis/successcriteria/passwordchecker/#subtractions","text":"However, if it contains only the following, it will recieve the configured amount of points. By default it is -5 points. Upper/Lowercase Characters Digits Allowed Symbols Consecutive (three) characters on the UK QWERTY keyboard, within the same row","title":"Subtractions"},{"location":"analysis/successcriteria/passwordchecker/#strength-determination","text":"To determine the strength, you must calculate the score first then you can input it within this table. Score Strength =< 0 Weak 1-20 Medium 21+ Strong","title":"Strength Determination"},{"location":"analysis/successcriteria/passwordgenerator/","text":"The generated password must follow these specifications: Random All parts of the generation must be random, including the length, and the characters used. Length The password must be between 8-12 characters. Characters It must only use the characters stated within the Allowed Characters section. Strength The strength of the generated password must be Strong , using the Password Checker . Warning Repeat the generation until it does have a Strong strength.","title":"Password Generator"},{"location":"analysis/successcriteria/passwordgenerator/#random","text":"All parts of the generation must be random, including the length, and the characters used.","title":"Random"},{"location":"analysis/successcriteria/passwordgenerator/#length","text":"The password must be between 8-12 characters.","title":"Length"},{"location":"analysis/successcriteria/passwordgenerator/#characters","text":"It must only use the characters stated within the Allowed Characters section.","title":"Characters"},{"location":"analysis/successcriteria/passwordgenerator/#strength","text":"The strength of the generated password must be Strong , using the Password Checker . Warning Repeat the generation until it does have a Strong strength.","title":"Strength"},{"location":"analysis/successcriteria/quit/","text":"Just a simple way of allowing the user to exit the program, saying a message before exiting.","title":"Quit"},{"location":"design/flowcharts/","text":"I will not perform flowcharts for every single function, just a couple. Password Class Constructor graph LR A[Start] --> B{Given text?} B -->|No| C[[Generate Password]] C --> Set text, strength, score B --->|Yes| D[Set text] D --> E[[Check Password]] F --> Set score, strength Check Input graph LR A[Start] --> B{Is text length between 8-24 characters} B -->|No| Print out error, and return false B --->|Yes| C{Includes illegal Characters?} C -->|No| Print out error, and return false C -->|Yes| Return true","title":"Index"},{"location":"design/flowcharts/#password-class","text":"","title":"Password Class"},{"location":"design/flowcharts/#constructor","text":"graph LR A[Start] --> B{Given text?} B -->|No| C[[Generate Password]] C --> Set text, strength, score B --->|Yes| D[Set text] D --> E[[Check Password]] F --> Set score, strength","title":"Constructor"},{"location":"design/flowcharts/#check-input","text":"graph LR A[Start] --> B{Is text length between 8-24 characters} B -->|No| Print out error, and return false B --->|Yes| C{Includes illegal Characters?} C -->|No| Print out error, and return false C -->|Yes| Return true","title":"Check Input"},{"location":"design/functions/","text":"All of the main functionality is within the PasswordManager namespace - more specifically, within the Password class. Password Class These is how the functions within the Password class would work. Note I may sometimes say add points whenever I should be subtracting. This is because you should be adding a negative amount of points. This allows it to be configurable. Constructor Firstly, it would generate a random password - if one was not given. If a password was given, it will check whether the input is valid, as well as against the Success Criteria . It should output the strength, and score, then set a class variable. This means the user can do password = new Password ( input ( \"Enter Password: \" )) and instantly output the score and strength by doing print ( password . strength + \" \" + password . score ) Check Input This would be a static member function of the class. All it will do is check against these Checks and error if there is any failed checks. Return It would return a boolean value. Check This function would calculate the password's score and strength. Additions It should, firstly, check each Addition check, and add the corrosponding points - as well as append the passed check to an array for later. If the password fails a test, the holder variable for seeing whether the password passed all of the checks would be set to false . After these checks, if the holder variable is true , it would add the corrosponding points for AllAbove - which, by defualt, is 10. Subtractions After adding points on, the program should remove points based upon the Subtraction checks. Using the abforementioned array, we can check whether the user has inputted a password has only one criteria - e.g. only uppercase characters. If the length of the array is 1, we can get the first element, and add the corrosponding points (usually a negative number). Consecutive characters To achieve this, we can iterate through the number of characters. From that number, we can get the next (three) characters within the password. We should have an array of each line from the UK QWERTY Keyboard. Now, loop through that array and check whether the line contains those (three) next characters we got earlier. If it does, add the corrosponding points (-10, by default). Score to Strength Since we have the amount of score / points, we can then do the following: - less or equal to zero = weak - larger than 20 = strong - else = medium Return With everything calculated, we can return the score and strength within a dictionary for the program. Generate This function would generate a random, and strong password for the user and return it - along with the score. Firstly, we would enter an infinite loop and it would generate a random number between 8-12 for the length. Then, we iterate through a range of the length, from 0. Each iteration would generate a random character that would be appended to a variable holding the generated password. After that, make sure that the password is strong by calculating its score. If it is, break out of the while loop. Return It should return the password, the score, and strength within a dictionary. Menu Class This class would manage how the menu is displayed to the user. It allows for an automated way of adding items to the menu easily, making this program easy to expand upon. Constructor It would allow you to set the items (within the menu), if specified. Add This would add an item into the menu item array. Display This would iterate through each item in the menu item array, and print it out. Prompt This would prompt the user to choose an option from the menu item array. It should have some failsafes to make sure the user doesn't input anything incorrectly. Return The option the user has selected Execute This would prompt the user, as said above, and execute the function associated with the option. Index This is all of the functions within the main index file Check Password This would prompt the user for a password to enter, making sure it is valid using the Password Input Check function. If it is not valid, it would return (the input check function would error for us). From there, it'll create a new password class where it automatically calculates the strength and score. After that, it would output the password's strength and score. Generate Password Firstly, this would ask the user if they would like to use symbols in their password. After this, it would generate a password using the generate function - which is apart of the Password class. Finally, it would print out the password and the score. Quit Program This is a simple function that only prints out Goodbye! , then exiting the process.","title":"Index"},{"location":"design/functions/#password-class","text":"These is how the functions within the Password class would work. Note I may sometimes say add points whenever I should be subtracting. This is because you should be adding a negative amount of points. This allows it to be configurable.","title":"Password Class"},{"location":"design/functions/#constructor","text":"Firstly, it would generate a random password - if one was not given. If a password was given, it will check whether the input is valid, as well as against the Success Criteria . It should output the strength, and score, then set a class variable. This means the user can do password = new Password ( input ( \"Enter Password: \" )) and instantly output the score and strength by doing print ( password . strength + \" \" + password . score )","title":"Constructor"},{"location":"design/functions/#check-input","text":"This would be a static member function of the class. All it will do is check against these Checks and error if there is any failed checks.","title":"Check Input"},{"location":"design/functions/#return","text":"It would return a boolean value.","title":"Return"},{"location":"design/functions/#check","text":"This function would calculate the password's score and strength.","title":"Check"},{"location":"design/functions/#additions","text":"It should, firstly, check each Addition check, and add the corrosponding points - as well as append the passed check to an array for later. If the password fails a test, the holder variable for seeing whether the password passed all of the checks would be set to false . After these checks, if the holder variable is true , it would add the corrosponding points for AllAbove - which, by defualt, is 10.","title":"Additions"},{"location":"design/functions/#subtractions","text":"After adding points on, the program should remove points based upon the Subtraction checks. Using the abforementioned array, we can check whether the user has inputted a password has only one criteria - e.g. only uppercase characters. If the length of the array is 1, we can get the first element, and add the corrosponding points (usually a negative number).","title":"Subtractions"},{"location":"design/functions/#consecutive-characters","text":"To achieve this, we can iterate through the number of characters. From that number, we can get the next (three) characters within the password. We should have an array of each line from the UK QWERTY Keyboard. Now, loop through that array and check whether the line contains those (three) next characters we got earlier. If it does, add the corrosponding points (-10, by default).","title":"Consecutive characters"},{"location":"design/functions/#score-to-strength","text":"Since we have the amount of score / points, we can then do the following: - less or equal to zero = weak - larger than 20 = strong - else = medium","title":"Score to Strength"},{"location":"design/functions/#return_1","text":"With everything calculated, we can return the score and strength within a dictionary for the program.","title":"Return"},{"location":"design/functions/#generate","text":"This function would generate a random, and strong password for the user and return it - along with the score. Firstly, we would enter an infinite loop and it would generate a random number between 8-12 for the length. Then, we iterate through a range of the length, from 0. Each iteration would generate a random character that would be appended to a variable holding the generated password. After that, make sure that the password is strong by calculating its score. If it is, break out of the while loop.","title":"Generate"},{"location":"design/functions/#return_2","text":"It should return the password, the score, and strength within a dictionary.","title":"Return"},{"location":"design/functions/#menu-class","text":"This class would manage how the menu is displayed to the user. It allows for an automated way of adding items to the menu easily, making this program easy to expand upon.","title":"Menu Class"},{"location":"design/functions/#constructor_1","text":"It would allow you to set the items (within the menu), if specified.","title":"Constructor"},{"location":"design/functions/#add","text":"This would add an item into the menu item array.","title":"Add"},{"location":"design/functions/#display","text":"This would iterate through each item in the menu item array, and print it out.","title":"Display"},{"location":"design/functions/#prompt","text":"This would prompt the user to choose an option from the menu item array. It should have some failsafes to make sure the user doesn't input anything incorrectly.","title":"Prompt"},{"location":"design/functions/#return_3","text":"The option the user has selected","title":"Return"},{"location":"design/functions/#execute","text":"This would prompt the user, as said above, and execute the function associated with the option.","title":"Execute"},{"location":"design/functions/#index","text":"This is all of the functions within the main index file","title":"Index"},{"location":"design/functions/#check-password","text":"This would prompt the user for a password to enter, making sure it is valid using the Password Input Check function. If it is not valid, it would return (the input check function would error for us). From there, it'll create a new password class where it automatically calculates the strength and score. After that, it would output the password's strength and score.","title":"Check Password"},{"location":"design/functions/#generate-password","text":"Firstly, this would ask the user if they would like to use symbols in their password. After this, it would generate a password using the generate function - which is apart of the Password class. Finally, it would print out the password and the score.","title":"Generate Password"},{"location":"design/functions/#quit-program","text":"This is a simple function that only prints out Goodbye! , then exiting the process.","title":"Quit Program"},{"location":"design/pseudocode/","text":"This will be some pseudocode on some things, not on every aspect. Generate password while ( true ): password = \"\" for i in range ( 1 , passwordLength ): password += randomCharacter ( characterSet ) if ( checkPassword ( password ) == \"strong\" ): return password","title":"Index"},{"location":"design/pseudocode/#generate-password","text":"while ( true ): password = \"\" for i in range ( 1 , passwordLength ): password += randomCharacter ( characterSet ) if ( checkPassword ( password ) == \"strong\" ): return password","title":"Generate password"},{"location":"design/validation/","text":"","title":"Index"},{"location":"evaluation/","text":"Most of the aspects within the code I think are built well, however there are some improvements one could make to make it more user-friendly. Possible Improvements Using React React would allow the user to interact with the program in a graphical way, making it more intuative, and user-friendly. Some people may not be that technical and unsure about how to use a command-line program. In addition, React would allow the program to automatically disallow the usage of disallowed characters and alert the user straight away. Help Menu A user using the program for the first time may not know that spaces are not allowed - for example. A help menu outlining all of the details would help the user understand the usage better. Limitations There are quite a few limitations listed by the Success Criteria , like the limited 8-24 character strength. What if the user wanted a 30 character password? Perhaps a better method of \"scoring\" a password would be better. Regex Usage The way I used Regex may not have been the most efficient, perhaps putting it all into one and using capture groups or something may be a more performant method. In general, there might be a better way of doing regex, especially the one for checking illegal characters which I hard coded since I didn't know how to do that in regex.","title":"Evaluation"},{"location":"evaluation/#possible-improvements","text":"","title":"Possible Improvements"},{"location":"evaluation/#using-react","text":"React would allow the user to interact with the program in a graphical way, making it more intuative, and user-friendly. Some people may not be that technical and unsure about how to use a command-line program. In addition, React would allow the program to automatically disallow the usage of disallowed characters and alert the user straight away.","title":"Using React"},{"location":"evaluation/#help-menu","text":"A user using the program for the first time may not know that spaces are not allowed - for example. A help menu outlining all of the details would help the user understand the usage better.","title":"Help Menu"},{"location":"evaluation/#limitations","text":"There are quite a few limitations listed by the Success Criteria , like the limited 8-24 character strength. What if the user wanted a 30 character password? Perhaps a better method of \"scoring\" a password would be better.","title":"Limitations"},{"location":"evaluation/#regex-usage","text":"The way I used Regex may not have been the most efficient, perhaps putting it all into one and using capture groups or something may be a more performant method. In general, there might be a better way of doing regex, especially the one for checking illegal characters which I hard coded since I didn't know how to do that in regex.","title":"Regex Usage"},{"location":"testing/","text":"Unfortunately, I do not have any screenshots or saved code. However, since I used GitHub for all of my code, you may look through the commit log . How to use the commit log Each entry within the commit log is called a \"commit\". Pressing on the commit title brings up a page which shows all of the changes. There is also a comments section which may include any extended explanations. Pressing on the < > button next to a commit shows all of the code as it would've have been at that point in time.","title":"Testing"},{"location":"testing/#how-to-use-the-commit-log","text":"Each entry within the commit log is called a \"commit\". Pressing on the commit title brings up a page which shows all of the changes. There is also a comments section which may include any extended explanations. Pressing on the < > button next to a commit shows all of the code as it would've have been at that point in time.","title":"How to use the commit log"}]}