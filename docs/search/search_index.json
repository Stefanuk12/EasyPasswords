{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Source","title":"Home"},{"location":"analysis/","text":"Introduction This task is split into three seperate \"functions\". Menu A simple command-line way of interacting with the program, until the user no longer wants to. Password Checker A password checker, based upon a score system. Password Generator A password generator that uses the Password Checker to verify the strength of the password, in order to make a strong, and random password for the user.","title":"Introduction"},{"location":"analysis/#introduction","text":"This task is split into three seperate \"functions\".","title":"Introduction"},{"location":"analysis/#menu","text":"A simple command-line way of interacting with the program, until the user no longer wants to.","title":"Menu"},{"location":"analysis/#password-checker","text":"A password checker, based upon a score system.","title":"Password Checker"},{"location":"analysis/#password-generator","text":"A password generator that uses the Password Checker to verify the strength of the password, in order to make a strong, and random password for the user.","title":"Password Generator"},{"location":"analysis/proposedsolution/","text":"The Programing Language I will be using TypeScript. Why TypeScript? TypeScript is a superset of JavaScript, so in the end it is JavaScript - with types, and other features. This means not only is it cross-platform, but also performant, and can be made into a web application easily through the use of React. While I could use Python, I decided not to due to the reasons stated above, and I am not as experienced with it. In addition, Python's syntax and underlying architecture is not the best. Some may argue I could use the C family, and while I could, it may be too sophisticated for such a simple task.","title":"Proposed Solution"},{"location":"analysis/proposedsolution/#the-programing-language","text":"I will be using TypeScript.","title":"The Programing Language"},{"location":"analysis/proposedsolution/#why-typescript","text":"TypeScript is a superset of JavaScript, so in the end it is JavaScript - with types, and other features. This means not only is it cross-platform, but also performant, and can be made into a web application easily through the use of React. While I could use Python, I decided not to due to the reasons stated above, and I am not as experienced with it. In addition, Python's syntax and underlying architecture is not the best. Some may argue I could use the C family, and while I could, it may be too sophisticated for such a simple task.","title":"Why TypeScript?"},{"location":"analysis/successcriteria/menu/","text":"The menu should have the following options for the user to select from: Check Password Generate Password Quit.","title":"Menu"},{"location":"analysis/successcriteria/passwordchecker/","text":"Checks If the user fails the following checks, then an error message would be displayed. Password Length The length must be between 8-24 characters . Allowed characters The program must check whether the characters within the password are allowed. The following characters are allowed: Alphanumeric Characters Allowed Symbols (see below) Allowed Symbols If the user inputs any symbols, these are the allowed ones. ! $ % ^ & * ( ) - _ = + Warning The space character is not allowed Score Calculation The following will explain how the program should calculate a password's total score. Additions If the password contains any of the following, it will recieve the configurated amount of points. By default it is 5 points. A Uppercase Character A Lowercase Character A Digit An Allowed Symbol Success If it includes all of the above, it will recieved the configured amount of points. By default it is 10 points. Subtractions However, if it contains only the following, it will recieve the configured amount of points. By default it is -5 points. Upper/Lowercase Characters Digits Allowed Symbols Consecutive (three) characters on the UK QWERTY keyboard, within the same row Strength Determination To determine the strength, you must calculate the score first then you can input it within this table. Score Strength =< 0 Weak 1-20 Medium 21+ Strong","title":"Password Checker"},{"location":"analysis/successcriteria/passwordchecker/#checks","text":"If the user fails the following checks, then an error message would be displayed.","title":"Checks"},{"location":"analysis/successcriteria/passwordchecker/#password-length","text":"The length must be between 8-24 characters .","title":"Password Length"},{"location":"analysis/successcriteria/passwordchecker/#allowed-characters","text":"The program must check whether the characters within the password are allowed. The following characters are allowed: Alphanumeric Characters Allowed Symbols (see below)","title":"Allowed characters"},{"location":"analysis/successcriteria/passwordchecker/#allowed-symbols","text":"If the user inputs any symbols, these are the allowed ones. ! $ % ^ & * ( ) - _ = + Warning The space character is not allowed","title":"Allowed Symbols"},{"location":"analysis/successcriteria/passwordchecker/#score-calculation","text":"The following will explain how the program should calculate a password's total score.","title":"Score Calculation"},{"location":"analysis/successcriteria/passwordchecker/#additions","text":"If the password contains any of the following, it will recieve the configurated amount of points. By default it is 5 points. A Uppercase Character A Lowercase Character A Digit An Allowed Symbol Success If it includes all of the above, it will recieved the configured amount of points. By default it is 10 points.","title":"Additions"},{"location":"analysis/successcriteria/passwordchecker/#subtractions","text":"However, if it contains only the following, it will recieve the configured amount of points. By default it is -5 points. Upper/Lowercase Characters Digits Allowed Symbols Consecutive (three) characters on the UK QWERTY keyboard, within the same row","title":"Subtractions"},{"location":"analysis/successcriteria/passwordchecker/#strength-determination","text":"To determine the strength, you must calculate the score first then you can input it within this table. Score Strength =< 0 Weak 1-20 Medium 21+ Strong","title":"Strength Determination"},{"location":"analysis/successcriteria/passwordgenerator/","text":"The generated password must follow these specifications: Random All parts of the generation must be random, including the length, and the characters used. Length The password must be between 8-12 characters. Characters It must only use the characters stated within the Allowed Characters section. Strength The strength of the generated password must be Strong , using the Password Checker . Warning Repeat the generation until it does have a Strong strength.","title":"Password Generator"},{"location":"analysis/successcriteria/passwordgenerator/#random","text":"All parts of the generation must be random, including the length, and the characters used.","title":"Random"},{"location":"analysis/successcriteria/passwordgenerator/#length","text":"The password must be between 8-12 characters.","title":"Length"},{"location":"analysis/successcriteria/passwordgenerator/#characters","text":"It must only use the characters stated within the Allowed Characters section.","title":"Characters"},{"location":"analysis/successcriteria/passwordgenerator/#strength","text":"The strength of the generated password must be Strong , using the Password Checker . Warning Repeat the generation until it does have a Strong strength.","title":"Strength"},{"location":"analysis/successcriteria/quit/","text":"Just a simple way of allowing the user to exit the program, saying a message before exiting.","title":"Quit"},{"location":"design/flowcharts/","text":"","title":"Index"},{"location":"design/functions/","text":"","title":"Index"},{"location":"design/pseudocode/","text":"","title":"Index"},{"location":"design/validation/","text":"","title":"Index"},{"location":"evaluation/","text":"Most of the aspects within the code I think are built well, however there are some improvements one could make to make it more user-friendly. Possible Improvements Using React React would allow the user to interact with the program in a graphical way, making it more intuative, and user-friendly. Some people may not be that technical and unsure about how to use a command-line program. In addition, React would allow the program to automatically disallow the usage of disallowed characters and alert the user straight away. Help Menu A user using the program for the first time may not know that spaces are not allowed - for example. A help menu outlining all of the details would help the user understand the usage better. Limitations There are quite a few limitations listed by the Success Criteria , like the limited 8-24 character strength. What if the user wanted a 30 character password? Perhaps a better method of \"scoring\" a password would be better. Regex Usage The way I used Regex may not have been the most efficient, perhaps putting it all into one and using capture groups or something may be a more performant method. In general, there might be a better way of doing regex, especially the one for checking illegal characters which I hard coded since I didn't know how to do that in regex.","title":"Evaluation"},{"location":"evaluation/#possible-improvements","text":"","title":"Possible Improvements"},{"location":"evaluation/#using-react","text":"React would allow the user to interact with the program in a graphical way, making it more intuative, and user-friendly. Some people may not be that technical and unsure about how to use a command-line program. In addition, React would allow the program to automatically disallow the usage of disallowed characters and alert the user straight away.","title":"Using React"},{"location":"evaluation/#help-menu","text":"A user using the program for the first time may not know that spaces are not allowed - for example. A help menu outlining all of the details would help the user understand the usage better.","title":"Help Menu"},{"location":"evaluation/#limitations","text":"There are quite a few limitations listed by the Success Criteria , like the limited 8-24 character strength. What if the user wanted a 30 character password? Perhaps a better method of \"scoring\" a password would be better.","title":"Limitations"},{"location":"evaluation/#regex-usage","text":"The way I used Regex may not have been the most efficient, perhaps putting it all into one and using capture groups or something may be a more performant method. In general, there might be a better way of doing regex, especially the one for checking illegal characters which I hard coded since I didn't know how to do that in regex.","title":"Regex Usage"},{"location":"testing/","text":"Unfortunately, I do not have any screenshots or saved code. However, since I used GitHub for all of my code, you may look through the commit log . How to use the commit log Each entry within the commit log is called a \"commit\". Pressing on the commit title brings up a page which shows all of the changes. There is also a comments section which may include any extended explanations. Pressing on the < > button next to a commit shows all of the code as it would've have been at that point in time.","title":"Testing"},{"location":"testing/#how-to-use-the-commit-log","text":"Each entry within the commit log is called a \"commit\". Pressing on the commit title brings up a page which shows all of the changes. There is also a comments section which may include any extended explanations. Pressing on the < > button next to a commit shows all of the code as it would've have been at that point in time.","title":"How to use the commit log"}]}